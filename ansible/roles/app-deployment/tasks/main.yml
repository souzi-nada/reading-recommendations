---
# tasks file for app-deployment
- name: Update apt repository
  apt:
    update_cache: yes
- name: Install required system packages
  apt:
    pkg:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
      - python3-pip
      - virtualenv
      - python3-setuptools
    state: latest
    update_cache: true 
- name: Add Docker GPG apt Key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker Repository
  apt_repository:
    repo: deb https://download.docker.com/linux/ubuntu focal stable
    state: present

- name: Update apt and install docker-ce
  apt:
    name: docker-ce
    state: latest
    update_cache: true

- name: Install Docker Module for Python
  pip:
    name: docker

- name: Add the current user to the docker group
  ansible.builtin.user:
    name: "jenkins"  # Use the current user running the playbook
    groups: docker
    append: yes
    
- name: Pull the latest Docker image
  community.docker.docker_image:
    name: "{{ docker_image }}"
    tag: "{{ build_number }}"
    state: present

- name: Deploy reading recommendations app
  kubernetes.core.k8s:
    kubeconfig: "/kubeconfig"   
    state: present
    definition: "{{ lookup('file', 'deployment.yaml') }}"

- name: Expose Service
  kubernetes.core.k8s:
    kubeconfig: "/kubeconfig"   
    state: present
    definition: "{{ lookup('file', 'service.yaml') }}"   

# - name: Stop existing Docker container
#   community.docker.docker_container:
#     name: reading-recommendations
#     state: stopped
#     force_kill: yes
#   ignore_errors: true

# - name: Remove old Docker container
#   community.docker.docker_container:
#     name: reading-recommendations
#     state: absent

# - name: Run the new Docker container
#   community.docker.docker_container:
#     name: reading-recommendations
#     image: "{{ docker_image }}:{{ build_number }}"
#     state: started
#     ports:
#       - "{{ app_port }}:3000"
#     restart_policy: always
#     env:
#       NODE_ENV: production
